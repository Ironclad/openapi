{
  "openapi": "3.0.3",
  "info": {
    "title": "Ironclad Public API",
    "description": "Documentation for Ironclad's REST API.",
    "contact": {
      "name": "Ironclad Support",
      "email": "support@ironcladapp.com"
    },
    "version": "1"
  },
  "servers": [
    {
      "url": "https://ironcladapp.com/public/api/v1",
      "description": "Production server"
    },
    {
      "url": "https://eu1.ironcladapp.com/public/api/v1",
      "description": "EU Production server"
    },
    {
      "url": "https://demo.ironcladapp.com/public/api/v1",
      "description": "Demo server"
    },
    {
      "url": "https://preview.ironcladapp.com/public/api/v1",
      "description": "Preview Server"
    }
  ],
  "paths": {
    "/workflows": {
      "post": {
        "summary": "Create a Workflow Synchronously",
        "description": "Launch a new Workflow synchronously.",
        "operationId": "launch-a-new-workflow",
        "requestBody": {
          "$ref": "#/components/requestBodies/WorkflowLaunch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/WorkflowLaunchResponse200"
          },
          "400": {
            "$ref": "#/components/responses/WorkflowLaunchResponse400"
          }
        },
        "tags": [
          "Workflows"
        ]
      },
      "get": {
        "summary": "List All Workflows",
        "description": "List all workflows in your Ironclad account.",
        "operationId": "list-all-workflows",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryPageNumber"
          },
          {
            "$ref": "#/components/parameters/QueryPageSize"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter the workflows that are listed based on their status. If this parameter is omitted, `active` workflows will be returned. Active workflows include workflows in the Create, Review, Sign, and Archive stages.",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "paused",
                "completed",
                "cancelled"
              ]
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "Filter workflows to a specific Template ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdated",
            "in": "query",
            "description": "Retrieve workflows that have been updated since a UTC date.",
            "schema": {
              "type": "string"
            }
          }, 
          {
            "name": "filter",
            "in": "query",
            "description": "Filter workflows using a formula. The workflow attribute ID should be enclosed in brackets `[ ]` and the value should be enclosed in single quotes `' '`.\n\nWorkflow attributes for a specific workflow design can be identified using the [List All Workflow Schemas](https://developer.ironcladapp.com/reference/list-all-workflow-schemas) endpoint.\n\nSupported formula operations include:\n\n<ul>\n  <li><code>Equals</code></li>\n  <li><code>Contains</code></li>\n  <li><code>And</code></li>\n  <li><code>Or</code></li>\n</ul>\nFor more information on writing formulas, please refer to\n<a href=\"https://ironcladapp.com/formulas/#company%20display%20name\">this article</a>.",
            "schema": {
              "type": "string"
            },
            "example": "Equals([counterpartyName], 'Harley Quinn')"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "example": 0,
                      "default": 0
                    },
                    "pageSize": {
                      "type": "integer",
                      "example": 20,
                      "default": 0
                    },
                    "count": {
                      "type": "integer",
                      "example": 1234,
                      "default": 0
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WorkflowResponseModel"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/async": {
      "post": {
        "summary": "Create a Workflow Asynchronously",
        "description": "Launch a new Workflow asynchronously for non-blocking performance, which is helpful when/if you provide files to the Workflow.",
        "operationId": "create-a-new-workflow-async",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AsyncWorkflowLaunchResponse200"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/async/{asyncJobId}": {
      "get": {
        "summary": "Retrieve the Status of an Async Workflow Create Job",
        "description": "Check the status of a Workflow you created while using the [Create a Workflow Async](https://developer.ironcladapp.com/reference/create-a-workflow-sync-vs-async#create-a-new-workflow-async) route.",
        "operationId": "retrieve-asynchronous-workflow-status",
        "parameters": [
          {
            "name": "asyncJobId",
            "in": "path",
            "description": "The identifier provided in the response of creating a Workflow asynchronously.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AsyncWorkflowStatusResponse200"
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "NOT_FOUND"
                    },
                    "message": {
                      "type": "string",
                      "example": "not found"
                    },
                    "param": {
                      "type": "string",
                      "example": "parameter identifier"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}": {
      "get": {
        "summary": "Retrieve a Workflow",
        "description": "View the data associated with a specific workflow",
        "operationId": "retrieve-a-workflow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string",
              "example": "abcd1234"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}/approvals": {
      "get": {
        "summary": "List All Workflow Approvals",
        "description": "Returns a list of approvals for the workflow. The `approvalGroups` property will display only triggered approvals (i.e. conditional approvals that have not been triggered will not appear).",
        "operationId": "list-all-workflow-approvals",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string",
              "example": "abcd1234"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflowId": {
                      "type": "string",
                      "example": "5f595f76c4fc9b3571413c3ac"
                    },
                    "title": {
                      "type": "string",
                      "example": "Consulting Agreement with Michael Scott Paper Company"
                    },
                    "approvalGroups": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "reviewers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "role": {
                                  "type": "string",
                                  "example": "finance"
                                },
                                "displayName": {
                                  "type": "string",
                                  "example": "Finance"
                                },
                                "reviewerType": {
                                  "type": "string",
                                  "example": "role"
                                },
                                "status": {
                                  "type": "string",
                                  "example": "pending"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "legal"
                          },
                          "displayName": {
                            "type": "string",
                            "example": "Legal"
                          },
                          "assignees": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "userName": {
                                  "type": "string",
                                  "example": "Boba Fett"
                                },
                                "userId": {
                                  "type": "string",
                                  "example": "63d415e0dd0d828c3a878548"
                                },
                                "email": {
                                  "type": "string",
                                  "example": "bobafett@gmail.com"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}/approval-requests": {
      "get": {
        "summary": "Retrieve the Approval Requests on a Workflow",
        "description": "Returns a list of approval requests that have taken place on the workflow.",
        "operationId": "approval-requests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/QueryPageNumber"
          },
          {
            "$ref": "#/components/parameters/QueryPageSize"
          },
          {
            "name": "actorDetails",
            "in": "query",
            "description": "An optional boolean parameter that adds additional information about the actor to each item in the response. Defaults to false.",
            "schema": {
              "type": "boolean",
              "example": false,
              "default": false
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "example": 0,
                      "default": 0
                    },
                    "pageSize": {
                      "type": "integer",
                      "example": 20,
                      "default": 20
                    },
                    "count": {
                      "type": "integer",
                      "example": 42
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "startTime": {
                            "type": "string",
                            "example": "2022-09-20T15:51:54.156Z"
                          },
                          "endTime": {
                            "type": "string",
                            "example": "2022-09-28T19:21:05.034Z"
                          },
                          "status": {
                            "type": "string",
                            "example": "approved"
                          },
                          "actorId": {
                            "type": "string",
                            "example": "6334b636b9fb1eb6e76ada97"
                          },
                          "actorType": {
                            "type": "string",
                            "example": "User"
                          },
                          "actorDetails": {
                            "type": "object",
                            "example": {
                              "userName": {
                                "type": "string",
                                "example": "Cave Johnson"
                              },
                              "userEmail": {
                                "type": "string",
                                "example": "cave@aperturescience.com"
                              }
                            }
                          },
                          "role": {
                            "type": "string",
                            "example": "approver58348a760b354ab3a986f56a74656c86"
                          },
                          "roleName": {
                            "type": "string",
                            "example": "CEO"
                          },
                          "approvalType": {
                            "type": "string",
                            "example": "Workflow"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "NOT_FOUND"
                    },
                    "message": {
                      "type": "string",
                      "example": "workflow does not exist"
                    },
                    "param": {
                      "type": "string",
                      "example": "workflowId"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "FORBIDDEN"
                    },
                    "message": {
                      "type": "string",
                      "example": "access forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}/approvals/{roleId}": {
      "patch": {
        "summary": "Update Approval on a Workflow",
        "description": "Updates an approval to the specified status. Approvals can only be updated during the Review step.",
        "operationId": "update-workflow-approval",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string",
              "example": "abcd1234"
            },
            "required": true
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "The unique identifier of the approver role whose status should be changed. This identifier can be retrieved using the `GET /workflows/{id}/approvals` endpoint.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "user",
                  "status"
                ],
                "properties": {
                  "user": {
                    "type": "object",
                    "description": "The Ironclad user approving the workflow. The user must be currently assigned as the approver.",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "The Ironclad user's email address.",
                        "example": "fett@intergalactic.com"
                      },
                      "type": {
                        "type": "string",
                        "description": "The mechanism of identifying the Ironclad user's account.",
                        "default": "email"
                      }
                    }
                  },
                  "status": {
                    "type": "string",
                    "enum": ["approved","pending"],
                    "description": "The new approval status."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "INVALID_PARAM"
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "This role does not exist in this workflow", 
                        "invalid user for user attribute", 
                        "This approval either was not requested or this user was not assigned to this approval"
                      ],
                      "example": "This role does not exist in this workflow"
                    },
                    "param": {
                      "type": "string",
                      "example": "approval"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}/turn-history": {
      "get": {
        "summary": "Retrieve the Turn History on a Workflow",
        "description": "An array of objects for each turn on a workflow.",
        "operationId": "turn-history",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/QueryPageNumber"
          },
          {
            "$ref": "#/components/parameters/QueryPageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "example": 0,
                      "default": 0
                    },
                    "pageSize": {
                      "type": "integer",
                      "example": 20,
                      "default": 20
                    },
                    "count": {
                      "type": "integer",
                      "example": 42
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "turnParty": {
                            "type": "string",
                            "example": "internal"
                          },
                          "turnStartTime": {
                            "type": "string",
                            "example": "2022-09-20T15:51:54.156Z"
                          },
                          "turnLocation": {
                            "type": "string",
                            "example": "manual change"
                          },
                          "turnUserId": {
                            "type": "string",
                            "example": "5f89b6a5eed2cc6e0b2735d4"
                          },
                          "turnEndTime": {
                            "type": "string",
                            "example": "2022-09-28T19:21:05.034Z"
                          },
                          "turnNumber": {
                            "type": "integer",
                            "example": 1
                          },
                          "turnUserEmail": {
                            "type": "string",
                            "example": "baldwin@ironcladhq.com"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "NOT_FOUND"
                    },
                    "message": {
                      "type": "string",
                      "example": "workflow does not exist"
                    },
                    "param": {
                      "type": "string",
                      "example": "workflowId"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "FORBIDDEN"
                    },
                    "message": {
                      "type": "string",
                      "example": "access forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}/signatures": {
      "get": {
        "summary": "List All Workflow Signers",
        "description": "Returns a list of workflow signers and the status of their signature.",
        "operationId": "list-all-workflow-signers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflowId": {
                      "type": "string",
                      "example": "6dac47a10b1242d1f7df688d"
                    },
                    "title": {
                      "type": "string",
                      "example": "Goldendoodle Adoption Contract"
                    },
                    "signers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Jimothy Kim"
                          },
                          "email": {
                            "type": "string",
                            "example": "jimothykim@gmail.com"
                          },
                          "roleName": {
                            "type": "string",
                            "example": "Counterparty Signer"
                          },
                          "signatureStatus": {
                            "type": "string",
                            "example": "sent"
                          },
                          "delegates": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "Kim Lam"
                                },
                                "email": {
                                  "type": "string",
                                  "example": "kimlam@gmail.com"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "INVALID_STATE"
                    },
                    "message": {
                      "type": "string",
                      "example": "This workflow is not at the Sign step, and is currently at the Review step"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "FORBIDDEN"
                    },
                    "message": {
                      "type": "string",
                      "example": "access forbidden"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}/participants": {
      "get": {
        "summary": "List All Workflow Participants",
        "description": "Returns a list of workflow participants.",
        "operationId": "list-all-workflow-participants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/QueryPageNumber"
          },
          {
            "$ref": "#/components/parameters/QueryPageSize"
          },
          {
            "name": "email",
            "in": "query",
            "description": "The Ironclad user's email address.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "example": 0,
                      "default": 0
                    },
                    "pageSize": {
                      "type": "integer",
                      "example": 20,
                      "default": 20
                    },
                    "count": {
                      "type": "integer",
                      "example": 1
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": {
                            "type": "string",
                            "example": "61968ae4945dcecf4a78cc83"
                          },
                          "email": {
                            "type": "string",
                            "example": "boba@intergalactic.com"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "FORBIDDEN"
                    },
                    "message": {
                      "type": "string",
                      "example": "access forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/WorkflowNotFoundResponse404"
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}/revert-to-review": {
      "patch": {
        "summary": "Revert a Workflow to the Review Step",
        "description": "Reverts a workflow to the Review step. Only workflows sourced from Workflow Designer and in the Sign step can be reverted.",
        "operationId": "revert-to-review",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          { "$ref": "#/components/parameters/XAsUserEmail" },
          { "$ref": "#/components/parameters/XAsUserId" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "user",
                  "status"
                ],
                "properties": {
                  "user": {
                    "type": "object",
                    "description": "The Ironclad user reverting the workflow to the Review step. The user must be a participant on the workflow.",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "The Ironclad user's email address.",
                        "example": "jango@intergalactic.com"
                      },
                      "type": {
                        "type": "string",
                        "description": "The mechanism of identifying the Ironclad user's account.",
                        "default": "email"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "204"
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAM",
                        "INVALID_STATE"
                      ],
                      "example": "INVALID_STATE"
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "invalid user for user attribute",
                        "workflow was not built in workflow designer and cannot be reverted to review via the API",
                        "workflow cannot be reverted to review as it is not in the sign stage",
                        "various malformed user payload messages"
                      ],
                      "example": "workflow cannot be reverted to review as it is not in the sign stage"
                    },
                    "param": {
                      "type": "string",
                      "example": "user"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "FORBIDDEN"
                    },
                    "message": {
                      "type": "string",
                      "example": "user is not a participant on the workflow"
                    },
                    "param": {
                      "type": "string",
                      "example": "user"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "NOT_FOUND"
                    },
                    "message": {
                      "type": "string",
                      "example": "workflow does not exist"
                    },
                    "param": {
                      "type": "string",
                      "example": "workflowId"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}/comment": {
      "post": {
        "deprecated": true,
        "summary": "Create a Comment on a Workflow",
        "description": "Creates a comment in the specified workflow's activity feed.",
        "operationId": "deprecated-create-a-comment-on-a-workflow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "creator",
                  "comment"
                ],
                "properties": {
                  "creator": {
                    "$ref": "#/components/schemas/CreatorEmailModel"
                  },
                  "comment": {
                    "type": "string",
                    "description": "The comment text to add, accepts user mentions in the form of <@user_id_or_email>."
                  },
                  "addUsersToWorkflow": {
                    "type": "boolean",
                    "description": "Must be set to true if mentioning users who are not participants on the workflow."
                  },
                  "repliedToActivityFeedMessageId": {
                    "type": "string",
                    "description": "Use to specify the comment to reply to"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "204",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": ["Workflows"]
      }
    },
    "/workflows/{id}/comments": {
      "post": {
        "summary": "Create a Comment on a Workflow",
        "description": "Creates a comment in the specified workflow's activity feed.",
        "operationId": "create-a-comment-on-a-workflow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["creator", "comment"],
                "properties": {
                  "creator": {
                    "$ref": "#/components/schemas/CreatorEmailModel"
                  },
                  "comment": {
                    "type": "string",
                    "description": "The comment text to add, accepts user mentions in the form of <@user_id_or_email>."
                  },
                  "addUsersToWorkflow": {
                    "type": "boolean",
                    "description": "Must be set to true if mentioning users who are not participants on the workflow."
                  },
                  "repliedToActivityFeedMessageId": {
                    "type": "string",
                    "description": "Use to specify the comment to reply to"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentActivityModel"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": ["Workflows"]
      }
    },
    "/workflows/{id}/attributes": {
      "patch": {
        "summary": "Update Workflow Metadata",
        "description": "The workflow must be in the Review step in order for its data to be updated. Use the `remove` action to clear field values and the `set` action to add or modify values. Form validation is enforced; required fields cannot be removed and any required fields triggered by conditions must be populated.",
        "operationId": "update-workflow-metadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          { "$ref": "#/components/parameters/XAsUserEmail" },
          { "$ref": "#/components/parameters/XAsUserId" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": ["set", "remove"],
                          "description": "The type of action you'd like to take on an existing attribute (read-only fields cannot be updated). Use the remove action to clear values. If using the remove action, the attribute cannot be required by the workflow.",
                          "default": "set"
                        },
                        "path": {
                          "type": "string",
                          "description": "The workflow attribute id that you'd like to make a change to. Workflow attribute IDs and values can be retrieved using the [Retrieve a Workflow](https://developer.ironcladapp.com/reference/retrieve-a-workflow) endpoint.",
                          "example": "counterpartyName"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value to change the attribute to. Only required when the `action` property is `set` and not `remove`. The value's format must conform to the field type (e.g., `\"someString\"` for strings, `true` or `false` for booleans, etc.",
                          "example": "Example Company"
                        }
                      },
                      "required": ["action", "path"]
                    }
                  },
                  "comment": {
                    "type": "string",
                    "description": "A comment that explains the updates you are making to the workflow.",
                    "example": "Changing attribute on a Workflow."
                  }
                },
                "required": ["updates"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "6013609108b8f070cee94fc1"
                    },
                    "ironcladId": {
                      "type": "string",
                      "example": "IC-1"
                    },
                    "title": {
                      "type": "string",
                      "example": "Consulting Agreement with Jane Doe"
                    },
                    "template": {
                      "type": "string",
                      "example": "600b296c3e15a234ab88f884"
                    },
                    "step": {
                      "type": "string",
                      "example": "Review"
                    },
                    "schema": {
                      "type": "object",
                      "properties": {
                        "counterpartyName": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "string"
                            },
                            "displayName": {
                              "type": "string",
                              "example": "Example String Attribute"
                            }
                          }
                        },
                        "amount": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "number"
                            },
                            "displayName": {
                              "type": "string",
                              "example": "Example Number Attribute"
                            }
                          }
                        },
                        "fee": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "monetaryAmount"
                            },
                            "displayName": {
                              "type": "string",
                              "example": "Example Monetary Amount Attribute"
                            }
                          }
                        },
                        "draft": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "array"
                            },
                            "elementType": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "example": "document"
                                },
                                "displayName": {
                                  "type": "string",
                                  "example": "Example Document Attribute"
                                }
                              }
                            }
                          }
                        },
                        "lineItems": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "array"
                            },
                            "elementType": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "example": "object"
                                },
                                "displayName": {
                                  "type": "string",
                                  "example": "Example Object Attribute"
                                },
                                "schema": {
                                  "type": "object",
                                  "properties": {
                                    "childAttribute": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "example": "string"
                                        },
                                        "displayName": {
                                          "type": "string",
                                          "example": "Example String Attribute"
                                        }
                                      }
                                    },
                                    "anotherChildAttribute": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "example": "string"
                                        },
                                        "displayName": {
                                          "type": "string",
                                          "example": "Example String Attribute"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "counterpartyName": {
                          "type": "string",
                          "example": "Boba Fett"
                        },
                        "amount": {
                          "type": "integer",
                          "example": 123,
                          "default": 0
                        },
                        "fee": {
                          "type": "object",
                          "properties": {
                            "currency": {
                              "type": "string",
                              "example": "USD"
                            },
                            "amount": {
                              "type": "integer",
                              "example": 50000,
                              "default": 0
                            }
                          }
                        },
                        "draft": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "version": {
                                "type": "string",
                                "example": "B1QePArXb"
                              },
                              "filename": {
                                "type": "string",
                                "example": "file.pdf"
                              },
                              "download": {
                                "type": "string",
                                "example": "/public/api/v1/workflows/594356b9fbcd7f74006fdf8a/document/rJklwCHQ/download"
                              }
                            }
                          }
                        }
                      }
                    },
                    "isCancelled": {
                      "type": "boolean",
                      "example": false,
                      "default": true
                    },
                    "isComplete": {
                      "type": "boolean",
                      "example": false,
                      "default": true
                    },
                    "status": {
                      "type": "string",
                      "example": "active"
                    },
                    "creator": {
                      "type": "object",
                      "properties": {
                        "displayName": {
                          "type": "string",
                          "example": "Boba Fett"
                        },
                        "email": {
                          "type": "string",
                          "example": "fett@intergalactic.com"
                        },
                        "id": {
                          "type": "string",
                          "example": "63d415e0dd0d828c3a878548"
                        }
                      }
                    },
                    "created": {
                      "type": "string",
                      "example": "2016-11-17T00:37:22.318Z"
                    },
                    "lastUpdated": {
                      "type": "string",
                      "example": "2016-11-17T00:37:22.318Z"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "legal"
                          },
                          "displayName": {
                            "type": "string",
                            "example": "Legal"
                          },
                          "assignees": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "userName": {
                                  "type": "string",
                                  "example": "Boba Fett"
                                },
                                "userId": {
                                  "type": "string",
                                  "example": "63d415e0dd0d828c3a878548"
                                },
                                "email": {
                                  "type": "string",
                                  "example": "bobafett@gmail.com"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "approvals": {
                      "type": "object",
                      "properties": {
                        "state": {
                          "type": "string",
                          "example": "in_progess"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://ironcladapp.com/public/api/v1/workflows/22e2ff72-56a1-4711-a4ca-41328d311e9f/approvals"
                        }
                      }
                    },
                    "signatures": {
                      "type": "object",
                      "properties": {
                        "state": {
                          "type": "string",
                          "example": "in_progess"
                        },
                        "url": {
                          "type": "string",
                          "example": "https://ironcladapp.com/public/api/v1/workflows/6dac47a10b1242d1f7df688d/signatures"
                        }
                      }
                    },
                    "recordIds": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "715f1e37-292f-4e6c-8b48-c07e1b68bccd"
                      }
                    },
                    "isRevertibleToReview": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "param": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "noInformationChanged": {
                    "summary": "No information changed",
                      "value": {
                        
                        "code": "INVALID_PARAM",
                        "message": "No information changed. The updates provided did not introduce any new values",
                        "param": "attributes"
                      }
                  },
                  "invalidParamNonExistentAttribute": {
                    "summary": "Non-existent attribute specified",
                      "value": {
                        
                        "code": "INVALID_PARAM",
                        "message": "non-existent attribute(s) specified: someRandomAttribute",
                        "param": "attributes"
                      }
                  },
                  "invalidParamFormValidationFailed": {
                    "summary": "Form validation failed",
                    "description": "Form validation may fail if (1) a required conditional field is triggered but not populated by your request (2) the value does not conform to the expected field type (e.g., sending strings to number fields).",
                    "value": { 
                      "code": "INVALID_PARAM",
                      "message": "form validation failed, please check schema",
                      "param": "attributes"
                    }
                  },
                  "invalidParamReadOnlyField": {
                    "summary": "Read-only attribute",
                    "description": "Cannot patch read-only attribute someRandomFunctionAttribute",
                    "value": { 
                      "code": "INVALID_PARAM",
                      "message": "Cannot patch read-only attribute someRandomFunctionAttribute",
                      "param": "attributes"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "FORBIDDEN"
                    },
                    "message": {
                      "type": "string",
                      "example": "access forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "NOT_FOUND"
                    },
                    "message": {
                      "type": "string",
                      "example": "not found"
                    },
                    "param": {
                      "type": "string",
                      "example": "parameter identifier"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}/document/{key}/download": {
      "get": {
        "summary": "Retrieve a Workflow Document",
        "description": "Download a document associated with a specific workflow via a reference to its document key",
        "operationId": "retrieve-a-workflow-document",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier or Ironclad ID of a workflow.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "key",
            "in": "path",
            "description": "The unique identifier for the attachment. This key can be located using the [Retrieve a Workflow](https://developer.ironcladapp.com/reference/retrieve-a-workflow) endpoint. In the response, locate the file attribute (e.g., `draft`) and look at its `download` parameter. The download parameter includes the key at the end of the URL `.../document/{ATTACHMENT_KEY}/download`",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/workflows/{id}/emails": {
      "get": {
        "summary": "Retrieve Email Threads from A Workflow",
        "description": "List all email threads in the specified workflow",
        "operationId": "retrieve-email-threads-from-workflow",
        "parameters": [
          {
            "$ref": "#/components/parameters/WorkflowId"
          },
          {
            "$ref": "#/components/parameters/QueryPageNumber"
          },
          {
            "$ref": "#/components/parameters/QueryPageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmailsResponse200" 
          },
          "404": {
            "$ref" : "#/components/responses/WorkflowNotFoundResponse404"
          }
        },
        "tags": ["Workflows"]
      }
    },
    "/workflows/{id}/emails/{emailThreadId}": {
      "get": {
        "summary": "Retrieve an Email Thread from a Specified Workflow",
        "description": "List a single email thread for a specified workflow",
        "operationId": "retrieve-email-thread-from-workflow",
        "parameters": [
          {
            "$ref": "#/components/parameters/WorkflowId"
          },
          {
            "$ref": "#/components/parameters/EmailThreadId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmailResponse200"
          },
          "404": {
            "$ref": "#/components/responses/WorkflowOrEmailNotFoundResponse404"
          }
        },
        "tags": ["Workflows"]
      }
    },
    "/workflows/{id}/emails/{emailThreadId}/attachments/{attachmentId}": {
      "get": {
        "summary": "Retrieve an Attachment from an Email Thread",
        "description": "Retrieve an attachment from the specified email thread",
        "operationId": "retrieve-attachment-from-email-thread",
        "parameters": [
          {
            "$ref": "#/components/parameters/WorkflowId"
          },
          {
            "$ref": "#/components/parameters/EmailThreadId"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "The unique identifier for the attachment. This key can be located using the [Retrieve email threads from workflow](https://developer.ironcladapp.com/reference/retrieve-emails) endpoint. In the response, locate the file attribute (e.g., `attachments`) and look at its `download` parameter. The download parameter includes the key at the end of the URL `...emails/{emailThreadId}/attachment/{ATTACHMENT_ID}`",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFoundResponse404"
          }
        },
        "tags": ["Workflows"]
      }
    },
    "/workflow-schemas": {
      "get": {
        "summary": "List All Workflow Schemas",
        "description": "Returns a list of workflow schemas. Each schema specifies the fields used in the workflow's launch form.",
        "operationId": "list-all-workflow-schemas",
        "parameters": [
          {
            "name": "form",
            "in": "query",
            "description": "The launch form is the only form supported at this time.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "launch"
            }
          },
          { "$ref": "#/components/parameters/XAsUserEmail" },
          { "$ref": "#/components/parameters/XAsUserId" }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "list": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "a1b2c3d4"
                          },
                          "name": {
                            "type": "string",
                            "example": "MNDA"
                          },
                          "schema": {
                            "type": "object",
                            "properties": {
                              "counterpartyName": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "string"
                                  },
                                  "displayName": {
                                    "type": "string",
                                    "example": "Example String Attribute"
                                  }
                                }
                              },
                              "amount": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "number"
                                  },
                                  "displayName": {
                                    "type": "string",
                                    "example": "Example Number Attribute"
                                  }
                                }
                              },
                              "fee": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "monetaryAmount"
                                  },
                                  "displayName": {
                                    "type": "string",
                                    "example": "Example Monetary Amount Attribute"
                                  }
                                }
                              },
                              "draft": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "array"
                                  },
                                  "elementType": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "example": "document"
                                      },
                                      "displayName": {
                                        "type": "string",
                                        "example": "Example Document Attribute"
                                      }
                                    }
                                  }
                                }
                              },
                              "lineItems": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "array"
                                  },
                                  "elementType": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "example": "object"
                                      },
                                      "displayName": {
                                        "type": "string",
                                        "example": "Example Object Attribute"
                                      },
                                      "schema": {
                                        "type": "object",
                                        "properties": {
                                          "childAttribute": {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "string"
                                              },
                                              "displayName": {
                                                "type": "string",
                                                "example": "Example String Attribute"
                                              }
                                            }
                                          },
                                          "anotherChildAttribute": {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "string"
                                              },
                                              "displayName": {
                                                "type": "string",
                                                "example": "Example String Attribute"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "permissions": {
                            "type": "array",
                            "example": ["launch", "view"],
                            "items": {
                                "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "MISSING_PARAM"
                    },
                    "message": {
                      "type": "string",
                      "example": "reason why something has gone wrong"
                    },
                    "param": {
                      "type": "string",
                      "example": "parameter identifier"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Workflows"]
      }
    },
    "/workflow-schemas/{id}": {
      "get": {
        "summary": "Retrieve a Workflow Schema",
        "description": "Returns the fields used in the workflow's launch form.",
        "operationId": "retrieve-a-workflow-schema",
        "parameters": [
          {
            "description": "The unique identifier of a schema (see explanation of [Template ID](https://developer.ironcladapp.com/reference/getting-started-api)). A list of identifiers can be retrieved using the `GET /workflow-schemas` endpoint. Only published workflows will have an identifier. ",
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "form",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "launch"
            }
          },
          { "$ref": "#/components/parameters/XAsUserEmail" },
          { "$ref": "#/components/parameters/XAsUserId" }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "6013609108b8f070cee94fc1"
                    },
                    "name": {
                      "type": "string",
                      "example": "MNDA"
                    },
                    "schema": {
                      "type": "object",
                      "properties": {
                        "counterpartyName": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "string"
                            },
                            "displayName": {
                              "type": "string",
                              "example": "Example String Attribute"
                            }
                          }
                        },
                        "amount": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "number"
                            },
                            "displayName": {
                              "type": "string",
                              "example": "Example Number Attribute"
                            }
                          }
                        },
                        "fee": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "monetaryAmount"
                            },
                            "displayName": {
                              "type": "string",
                              "example": "Example Monetary Amount Attribute"
                            }
                          }
                        },
                        "draft": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "array"
                            },
                            "elementType": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "example": "document"
                                },
                                "displayName": {
                                  "type": "string",
                                  "example": "Example Document Attribute"
                                }
                              }
                            }
                          }
                        },
                        "lineItems": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "array"
                            },
                            "elementType": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "example": "object"
                                },
                                "displayName": {
                                  "type": "string",
                                  "example": "Example Object Attribute"
                                },
                                "schema": {
                                  "type": "object",
                                  "properties": {
                                    "childAttribute": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "example": "string"
                                        },
                                        "displayName": {
                                          "type": "string",
                                          "example": "Example String Attribute"
                                        }
                                      }
                                    },
                                    "anotherChildAttribute": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "example": "string"
                                        },
                                        "displayName": {
                                          "type": "string",
                                          "example": "Example String Attribute"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "permissions": {
                      "type": "array",
                      "example": ["launch", "view"],
                      "items": {
                          "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "param": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "notFound": {
                    "summary": "Non-existent template id.",
                    "value": {
                      "code": "NOT_FOUND",
                      "message": "workflow  template schema not found",
                      "param": "templateId"
                    }
                  },
                  "invalidParam": {
                    "summary": "Invalid query parameter.",
                    "value": {
                      "code": "INVALID_PARAM",
                      "message": "invalid query value 'randomRequest'; value must be one of [launch]",
                      "param": "/?form"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Workflows"
        ]
      }
    },
    "/records": {
      "get": {
        "summary": "List All Records",
        "description": "View all records in the company, with filtering available via query parameters",
        "operationId": "list-all-records",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryPageNumber"
          },
          {
            "$ref": "#/components/parameters/QueryPageSize"
          },
          {
            "$ref": "#/components/parameters/RecordType"
          },
          {
            "$ref": "#/components/parameters/RecordLastUpdated"
          },
          {
            "$ref": "#/components/parameters/RecordFilter"
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field to sort Records. Only one field is supported in the sort operation.",
            "schema": {
              "type": "string",
              "enum": [
                "agreementDate",
                "name",
                "lastUpdated"
              ],
              "default": "agreementDate"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The direction the records are sorted by in correlation with the `sortField`.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "example": 0,
                      "default": 0
                    },
                    "pageSize": {
                      "type": "integer",
                      "example": 20,
                      "default": 0
                    },
                    "count": {
                      "type": "integer",
                      "example": 1234,
                      "default": 0
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RecordModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Records"
        ]
      },
      "post": {
        "summary": "Create a Record",
        "description": "Create a contract record by specifying its intended metadata properties",
        "operationId": "create-a-record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "name",
                  "properties"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of record to be created. You can view available record types by retrieving records metadata."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the record."
                  },
                  "properties": {
                    "type": "object",
                    "description": "Object containing key/value pairs of metadata attached to the record. The key you specify must have a value with a supported type as outlined in the Supported Property Types section.",
                    "properties": {
                      "agreementDate": {
                        "type": "object",
                        "description": "The date of the agreement.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "date"
                          },
                          "value": {
                            "type": "string",
                            "description": "UTC date (e.g. `2018-05-08T00:00:00-07:00`)"
                          }
                        }
                      },
                      "counterpartyName": {
                        "type": "object",
                        "description": "The name of the counterparty.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "string"
                          },
                          "value": {
                            "type": "string",
                            "description": "The name of the counterparty."
                          }
                        }
                      }
                    }
                  },
                  "links":  {
                    "type": "array",
                    "items": {
                      "$ref":  "#/components/schemas/RecordPropertyLinkModel"
                    }
                  },
                  "parent": {
                    "type": "object",
                    "description": "Object containing Record IDs or Ironclad IDs to be set as the parent of the current record.",
                    "properties": {
                      "recordId": {
                        "type": "string",
                        "example": "17009e0d-z2e9-425d-a85b-1cf152773efg"
                      }
                    }
                  },
                  "children" : {
                    "type": "array",
                    "description": "List of objects containing the Record IDs or Ironclad IDs of the records to be set as child records of the current record.",
                    "items": {
                      "$ref": "#/components/schemas/RecordPropertyLinkModel"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordModel"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "param": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalidRecordType": {
                    "summary": "Unknown record type.",
                    "value": {
                      "code": "INVALID_PARAM",
                      "message": "unknown record type my_nonexistent_record_type",
                      "param": "type"
                    }
                  },
                  "invalidRecordProperty": {
                    "summary": "Unknown record property.",
                    "value": {
                      "code": "INVALID_PARAM",
                      "message": "unknown property my_nonexistent_record_property",
                      "param": "properties.my_non_existent_record_property"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Records"
        ]
      }
    },
    "/records/smart-import": {
      "get": {
        "summary": "Retrieve Predictions",
        "description": "Retrieve status of predictions of specific smart import record or all records in an import, one of Record Id or Import Id is required.",
        "operationId": "retrieve-import-predictions",
        "parameters": [
          {
            "name": "recordId",
            "in": "query",
            "description": "The ID of the Record for prediction status.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "importId",
            "in": "query",
            "description": "The ID of the Import for prediction statuses.",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "properties": {
                          "recordId": {
                            "type": "string",
                            "example": "df1c2805-f5a3-4a14-9386-c28d950dff49"
                          },
                          "status": {
                            "type": "string",
                            "enum": ["ready", "pending", "errored"]
                          }
                        }
                      },
                      "example": {
                        "recordId": "461aa9a3-5984-4553-b8ab-56a1786c2f44",
                        "status": "ready"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "recordId": {
                            "type": "string",
                            "example": "df1c2805-f5a3-4a14-9386-c28d950dff49"
                          },
                          "status": {
                            "type": "string",
                            "enum": ["ready", "pending", "errored"]
                          }
                        }
                      },
                      "example": [
                        {
                          "recordId": "461aa9a3-5984-4553-b8ab-56a1786c2f44",
                          "status": "ready"
                        },
                        {
                          "recordId": "6392dd09-814d-4def-97d9-8fe8badcf6ce",
                          "status": "pending"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalidRecordType": {
                    "summary": "Missing Record Id or Import Id from query.",
                    "value": {
                      "code": "INVALID_PARAM",
                      "message": "missing required form-data part 'recordId' or 'importId"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "outOfSmartImportCredits": {
                    "summary": "Smart Imports not enabled for company.",
                    "value": {
                      "code": "FORBIDDEN",
                      "message": "Reading smart import records not allowed for company with id invalid-company-id "
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalidImportId": {
                    "summary": "Record Id is invalid or does not exist",
                    "value": {
                      "code": "NOT_FOUND",
                      "message": "couldn't find predictions for the record: invalid-record-id"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Records"]
      },
      "post": {
        "summary": "Create a Smart Import Record",
        "description": "Upload a file to create a record with smart import and predictions.  Provide none of recordType, newRecordTypeId, or newRecordTypeDisplayName to default to Imported type.",
        "operationId": "create-a-smart-import-record",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["attachment"],
                "properties": {
                  "attachment": {
                    "type": "string",
                    "format": "binary",
                    "description": "Must be a binary. Base64 is not accepted at this time."
                  },
                  "recordType": {
                    "type": "string",
                    "format": "string",
                    "default": "imported",
                    "description": "Upload a smart import record as an existing record type.  Cannot provide alongside newRecordTypeId and newRecordTypeDisplayName. Defaults to Imported."
                  },
                  "newRecordTypeId": {
                    "type": "string",
                    "description": "The record type ID for a not-yet-existing record type.  Must be provided along with a newRecordTypeDisplayName"
                  },
                  "newRecordTypeDisplayName": {
                    "type": "string",
                    "format": "string",
                    "description": "The display name of the new record type to create."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "recordId": {
                      "type": "string",
                      "description": "Record ID of the new created record",
                      "example": "17fe582d-e1e0-4000-bf65-3d2ec2c500a4"
                    },
                    "importId": {
                      "type": "string",
                      "example": "55ez635d-f2g9-5419-gs34-8h1jx4s733q9"
                    },
                    "remainingCredits": {
                      "type": "number",
                      "example": 50
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "param": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalidRecordType": {
                    "summary": "Invalid record type.",
                    "value": {
                      "code": "INVALID_PARAM",
                      "message": "unknown record type invalid_record_type",
                      "param": "type"
                    }
                  },
                  "invalidAttachment": {
                    "summary": "Document size is too large.",
                    "value": {
                      "code": "INVALID_PARAM",
                      "message": "parameter 'attachment' too large, please limit upload files less than 100MB",
                      "param": "attachment"
                    }
                  },
                  "invalidFileType": {
                    "summary": "Document size is too large.",
                    "value": {
                      "code": "INVALID_PARAM",
                      "message": "filename invalidFile.xyz does not have an accepted extension. Only the following extensions are allowed: .pdf, .docx, .doc, .xls, .xlsx, .eml, .tif, .jpg, .png, .jpeg, .txt, .ppt, .pptx.",
                      "param": "metadata.filename"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "outOfSmartImportCredits": {
                    "summary": "No more Smart Import Credits are available",
                    "value": {
                      "code": "FORBIDDEN",
                      "message": "No more smart import credits available"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalidImportId": {
                    "summary": "Import Id is invalid or does not exist",
                    "value": {
                      "code": "NOT_FOUND",
                      "message": "couldn't find a record matching the id invalid-import-id"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Records"]
      }
    },
    "/records/smart-import/{importId}": {
      "post": {
        "summary": "Upload a Smart Import Record to an existing Import",
        "description": "Upload a file to an existing import and create a record with smart import and predictions.  Provide none of recordType, newRecordTypeId, or newRecordTypeDisplayName to default to Imported type.",
        "operationId": "create-a-smart-import-record-to-import",
        "parameters": [
          {
            "name": "importId",
            "in": "path",
            "description": "The Import Id. You can upload a record to an existing import in the repository. ",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["attachment", "recordType"],
                "type": "object",
                "properties": {
                  "attachment": {
                    "type": "string",
                    "format": "binary",
                    "description": "Must be a binary. Base64 is not accepted at this time."
                  },
                  "recordType": {
                    "type": "string",
                    "format": "string",
                    "default": "imported",
                    "description": "Upload a smart import record as an existing record type.  Cannot provide alongside newRecordTypeId and newRecordTypeDisplayName. Defaults to Imported."
                  },
                  "newRecordTypeId": {
                    "type": "string",
                    "description": "The record type ID for a not-yet-existing record type.  Must be provided along with a newRecordTypeDisplayName"
                  },
                  "newRecordTypeDisplayName": {
                    "type": "string",
                    "format": "string",
                    "description": "The display name of the new record type to create."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "recordId": {
                      "type": "string",
                      "description": "Record ID of the new created record",
                      "example": "17fe582d-e1e0-4000-bf65-3d2ec2c500a4"
                    },
                    "importId": {
                      "type": "string",
                      "example": "55ez635d-f2g9-5419-gs34-8h1jx4s733q9"
                    },
                    "remainingCredits": {
                      "type": "number",
                      "example": 50
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "param": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalidRecordType": {
                    "summary": "Invalid record type.",
                    "value": {
                      "code": "INVALID_PARAM",
                      "message": "unknown record type invalid_record_type",
                      "param": "recordType"
                    }
                  },
                  "invalidAttachment": {
                    "summary": "Document size is too large.",
                    "value": {
                      "code": "INVALID_PARAM",
                      "message": "parameter 'attachment' too large, please limit upload files less than 100MB",
                      "param": "attachment"
                    }
                  },
                  "invalidFileType": {
                    "summary": "Document size is too large.",
                    "value": {
                      "code": "INVALID_PARAM",
                      "message": "filename invalidFile.xyz does not have an accepted extension. Only the following extensions are allowed: .pdf, .docx, .doc, .xls, .xlsx, .eml, .tif, .jpg, .png, .jpeg, .txt, .ppt, .pptx.",
                      "param": "metadata.filename"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "outOfSmartImportCredits": {
                    "summary": "No more Smart Import Credits are available",
                    "value": {
                      "code": "FORBIDDEN",
                      "message": "No more smart import credits available"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalidImportId": {
                    "summary": "Import Id is invalid or does not exist",
                    "value": {
                      "code": "NOT_FOUND",
                      "message": "couldn't find a record matching the id invalid-import-id"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Records"]
      }
    },
    "/records/{id}": {
      "get": {
        "summary": "Retrieve a Record",
        "description": "View a specific record and its associated data",
        "operationId": "retrieve-a-record",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or Ironclad ID of the Record.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordModel"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Records"
        ]
      },
      "put": {
        "summary": "Replace a Record",
        "description": "Update an existing record with a new set of metadata",
        "operationId": "replace-a-record",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or Ironclad ID of the Record.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "name",
                  "properties"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of record to be created. You can view available record types by retrieving records metadata."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the record."
                  },
                  "properties": {
                    "type": "object",
                    "description": "Object containing key/value pairs of metadata attached to the record. The key you specify must have a value with a supported type as outlined in the Supported Property Types section.",
                    "properties": {
                      "agreementDate": {
                        "type": "object",
                        "description": "The date of the agreement.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "date"
                          },
                          "value": {
                            "type": "string",
                            "description": "UTC date (e.g. `2018-05-08T00:00:00-07:00`)"
                          }
                        }
                      },
                      "counterpartyName": {
                        "type": "object",
                        "description": "The name of the counterparty.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "string"
                          },
                          "value": {
                            "type": "string",
                            "description": "The name of the counterparty."
                          }
                        }
                      }
                    }
                  },
                  "parent": {
                    "type": "object",
                    "description": "Object containing Record IDs or Ironclad IDs to be set as the parent of the current record.",
                    "properties": {
                      "recordId": {
                        "type": "string",
                        "example": "17009e0d-z2e9-425d-a85b-1cf152773efg"
                      }
                    }
                  },
                  "children": {
                    "type": "array",
                    "description": "List of objects containing the Record IDs or Ironclad IDs of the records to be set as child records of the current record.",
                    "items": {
                      "$ref": "#/components/schemas/RecordPropertyLinkModel"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordModel"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Records"
        ]
      },
      "delete": {
        "summary": "Delete a Record",
        "description": "Delete an existing record",
        "operationId": "delete-a-record",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or Ironclad ID of the Record.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "204",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Records"
        ]
      },
      "patch": {
        "summary": "Update Record Metadata",
        "description": "Update specific fields on a record",
        "operationId": "update-record-metadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or Ironclad ID of the Record.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of Record."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the Record."
                  },
                  "addProperties": {
                    "type": "object",
                    "description": "A key:value map of properties to add. The two below are examples.",
                    "properties": {
                      "counterpartyName": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "string"
                          },
                          "value": {
                            "type": "string",
                            "example": "Jane Doe"
                          }
                        }
                      },
                      "agreementDate": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "date",
                            "example": "date"
                          },
                          "value": {
                            "type": "string",
                            "example": "2018-05-08T00:00:00-07:00"
                          }
                        }
                      }
                    }
                  },
                  "removeProperties": {
                    "type": "array",
                    "description": "List of record property ids to be removed (e.g., ['counterpartyAddress', 'agreementExpirationDate'])",
                    "items": {
                      "type": "string"
                    }
                  },
                  "addLinks": {
                    "type": "array",
                    "description": "List of objects containing the Record IDs or Ironclad IDs of the records to link. For an explanation of Record IDs or Ironclad IDs and how to find them, see [Getting Started](https://developer.ironcladapp.com/reference/getting-started-api).",
                    "items": {
                      "$ref": "#/components/schemas/RecordPropertyLinkModel"
                    }
                  },
                  "removeLinks": {
                    "type": "array",
                    "description": "List of objects containing the Record IDs or Ironclad IDs of the record links to remove. For an explanation of Record IDs or Ironclad IDs and how to find them, see [Getting Started](https://developer.ironcladapp.com/reference/getting-started-api).",
                    "items": {
                      "$ref": "#/components/schemas/RecordPropertyLinkModel"
                    }
                  },
                  "setParent": {
                    "type": "object",
                    "description": "Object containing Record IDs or Ironclad IDs to be set as the parent of the current record.",
                    "properties": {
                      "recordId": {
                        "type": "string",
                        "example": "17009e0d-z2e9-425d-a85b-1cf152773efg"
                      }
                    }
                  },
                  "addChildren": {
                    "type": "array",
                    "description": "List of objects containing the Record IDs or Ironclad IDs of the records to be set as child records of the current record.",
                    "items": {
                      "$ref": "#/components/schemas/RecordPropertyLinkModel"
                    }
                  },
                  "removeParent": {
                    "type": "boolean",
                    "description": "Boolean flag to indicate if the parent id should be removed for the current record.",
                    "example": false
                  },
                  "removeChildren": {
                    "type": "array",
                    "description": "List of objects containing the Record IDs or Ironclad IDs of the child records to be removed from the current record.",
                    "items": {
                      "$ref": "#/components/schemas/RecordPropertyLinkModel"
                    }
                  }
                }
              },
              "examples": {
                "Request Example": {
                  "value": {
                    "type": "consultingAgreement",
                    "name": "Consulting Agreement with Jane Doe",
                    "addProperties": {
                      "agreementDate": {
                        "type": "date",
                        "value": "2018-05-08T00:00:00-07:00"
                      },
                      "counterpartyName": {
                        "type": "string",
                        "value": "Jane Doe"
                      }
                    },
                    "removeProperties": [
                      "counterpartySigner"
                    ],
                    "addLinks": [
                      {
                        "recordId": "df1c2805-f5a3-4a14-9386-c28d950dff49"
                      }
                    ],
                    "removeLinks": [
                      {
                        "recordId": "df1c2805-f5a3-4a14-9386-c28d950dff49"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordModel"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "MISSING_PARAM"
                    },
                    "message": {
                      "type": "string",
                      "example": "reason why something has gone wrong"
                    },
                    "param": {
                      "type": "string",
                      "example": "parameter identifier"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "NOT_FOUND"
                    },
                    "message": {
                      "type": "string",
                      "example": "not found"
                    },
                    "param": {
                      "type": "string",
                      "example": "parameter identifier"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Records"
        ]
      }
    },
    "/records/metadata": {
      "get": {
        "summary": "Retrieve Records Schema",
        "description": "View the schema associated with contract records, including available record types and metadata properties.",
        "operationId": "list-all-records-metadata",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "recordTypes": {
                      "type": "object",
                      "properties": {
                        "contract": {
                          "type": "object",
                          "properties": {
                            "displayName": {
                              "type": "string",
                              "example": "Contract"
                            }
                          }
                        }
                      }
                    },
                    "properties": {
                      "type": "object",
                      "properties": {
                        "additionalNotes": {
                          "type": "object",
                          "properties": {
                            "displayName": {
                              "type": "string",
                              "example": "Additional Notes"
                            },
                            "type": {
                              "type": "string",
                              "example": "string"
                            },
                            "visible": {
                              "type": "boolean",
                              "example": true,
                              "default": true
                            }
                          }
                        },
                        "agreementDate": {
                          "type": "object",
                          "properties": {
                            "displayName": {
                              "type": "string",
                              "example": "Agreement Date"
                            },
                            "type": {
                              "type": "string",
                              "example": "date"
                            },
                            "visible": {
                              "type": "boolean",
                              "example": true,
                              "default": true
                            }
                          }
                        },
                        "workflowId": {
                          "type": "object",
                          "properties": {
                            "displayName": {
                              "type": "string",
                              "example": "Workflow ID"
                            },
                            "type": {
                              "type": "string",
                              "example": "string"
                            },
                            "visible": {
                              "type": "boolean",
                              "example": true,
                              "default": true
                            }
                          }
                        }
                      }
                    },
                    "attachments": {
                      "type": "object",
                      "properties": {
                        "signedCopy": {
                          "type": "object",
                          "properties": {
                            "displayName": {
                              "type": "string",
                              "example": "Signed PDF"
                            }
                          }
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Records"
        ]
      }
    },
    "/records/{id}/attachments/{key}": {
      "post": {
        "summary": "Create an Attachment on a Record",
        "description": "Create an attachment on a specified record at the specified attachment key.",
        "operationId": "create-an-attachment-on-a-record",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or Ironclad ID of the Record. For an explanation of Record IDs or Ironclad IDs and how to find them, see [Getting Started](https://developer.ironcladapp.com/reference/getting-started-api).",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "key",
            "in": "path",
            "description": "The attachment key. You can retrieve a list of available attachment keys with the [Retrieve Records Schema](https://developer.ironcladapp.com/reference/list-all-records-metadata) endpoint.",
            "schema": {
              "type": "string",
              "default": "signedCopy"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "attachment": {
                    "type": "string",
                    "format": "binary",
                    "description": "Must be a binary. Base64 is not accepted at this time."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "The `metadata` property's value must be `{\"filename\": \"[YOUR_FILE_NAME]\"}`",
                    "properties": {
                      "filename": {
                        "type": "string",
                        "description": "The name of the file. Must have a supported file extension (.adoc, .asice, .bdoc, .csv, .ddoc, .doc, .docx, .edoc, .eml, .gif, .htm, .jpeg, .jpg, .msg, .pdf, .png, .ppt, .pptx, .rtf,.tif, .txt, .xls, .xlsx, .xml).",
                        "example": "NDA - Acme LLC.pdf"                      
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/RecordAttachmentResponse400"
          }
        },
        "tags": [
          "Records"
        ]
      },
      "get": {
        "summary": "Retrieve an Attachment on a Record",
        "description": "View an attachment associated with a specific record",
        "operationId": "retrieve-an-attachment-on-a-record",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or Ironclad ID of the Record.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "key",
            "in": "path",
            "description": "The attachment key.",
            "schema": {
              "type": "string",
              "default": "signedCopy"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Records"
        ]
      },
      "delete": {
        "summary": "Delete an Attachment on a Record",
        "description": "Remove an attachment associated with a specific record",
        "operationId": "delete-an-attachment-on-a-record",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or Ironclad ID of the Record.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "key",
            "in": "path",
            "description": "The attachment key.",
            "schema": {
              "type": "string",
              "default": "signedCopy"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "204"
          },
          "404": {
            "$ref": "#/components/responses/AttachmentDeleteResponse404"
          }
        },
        "tags": [
          "Records"
        ]
      }
    },
    "/records/export": {
      "get": {
        "summary": "Retrieve XLSX Export File of Records",
        "description": "Export a records report with filtering available via query parameters",
        "operationId": "retrieve-xlsx-export-file-of-all-records",
        "parameters": [
          {
            "name": "types",
            "in": "query",
            "description": "Comma separated list of record types to export. Example: `mutualNDA,NDA`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "IDs of properties to export, comma separated. Example: `counterpartyName,agreementDate`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Records"
        ]
      }
    },
    "/webhooks": {
      "post": {
        "summary": "Create a Webhook",
        "description": "Creates a webhook for the specified events. Send separate requests if you need to create webhooks for multiple target URLs. Each target URL may only have one active registration.",
        "operationId": "create-a-webhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "events": {
                    "type": "array",
                    "description": "The event type(s) to trigger the webhook. Note: you can use `*` to receive events for all events, although we don't recommend this path, especially for environments with higher volume.",
                    "items": {
                        "$ref": "#/components/schemas/webhookEventTypeValue"
                    },
                    "minItems": 1
                  },
                  "targetURL": {
                    "type": "string",
                    "description": "The URL to send the webhook event payload to."
                  }
                },
                "required": [
                  "events",
                  "targetURL"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "5928719b30182d3700364a74"
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "workflow_launched"
                      }
                    },
                    "targetURL": {
                      "type": "string",
                      "example": "https://requestb.in/18m34b"
                    },
                    "company": {
                      "type": "string",
                      "example": "5928719b30182d3700364a74"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/webhookCreateResponse400"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "get": {
        "summary": "List All Webhooks",
        "description": "View all webhooks associated with a specific company with filtering available via query parameters",
        "operationId": "list-all-webhooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryPageNumber"
          },
          {
            "$ref": "#/components/parameters/QueryPageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "example": 0,
                      "default": 0
                    },
                    "pageSize": {
                      "type": "integer",
                      "example": 20,
                      "default": 0
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "5928719b30182d3700364a74"
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "workflow_launched"
                            }
                          },
                          "targetURL": {
                            "type": "string",
                            "example": "https://requestb.in/18m34bs1"
                          },
                          "company": {
                            "type": "string",
                            "example": "5928719b30182d3700364a74"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/{id}": {
      "get": {
        "summary": "Retrieve a Webhook",
        "description": "View the data associated with a specific webhook",
        "operationId": "retrieve-a-webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the webhook.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "5928719b30182d3700364a74"
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "workflow_launched"
                      }
                    },
                    "targetURL": {
                      "type": "string",
                      "example": "https://requestb.in/18m34b"
                    },
                    "company": {
                      "type": "string",
                      "example": "5928719b30182d3700364a74"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "patch": {
        "summary": "Update a Webhook",
        "description": "Update the data associated with a specific webhook",
        "operationId": "update-a-webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the webhook.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "events": {
                    "type": "array",
                    "description": "The type of events that will trigger a notification to the target URL.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "targetURL": {
                    "type": "string",
                    "description": "The URL of where the notification gets sent."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "5928719b30182d3700364a74"
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "workflow_launched"
                      }
                    },
                    "targetURL": {
                      "type": "string",
                      "example": "https://requestb.in/18m34b"
                    },
                    "company": {
                      "type": "string",
                      "example": "5928719b30182d3700364a74"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "delete": {
        "summary": "Delete a Webhook",
        "description": "Delete a specific webhook",
        "operationId": "delete-a-webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the webhook.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/verification-key": {
      "get": {
        "summary": "Retrieve Webhook Verification Key",
        "description": "View the verification key for webhook security implementations",
        "operationId": "retrieve-webhook-verification-key",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "text/plain": {
                "examples": {
                  "Result": {
                    "value": "PEM-FILE"
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": {}
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "Webhooks"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "LaunchedWorkflowModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "6013609108b8f070cee94fc1",
            "description": "The ID of the launched workflow.",
            "readOnly": true
          },
          "ironcladId": {
            "type": "string",
            "example": "IC-1",
            "description": "The Ironclad ID of the launched workflow.",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "example": "Consulting Agreement with Jane Doe",
            "description": "The name used for the launched workflow.",
            "readOnly": true
          },
          "template": {
            "$ref": "#/components/schemas/WorkflowTemplateIdModel"
          },
          "step": {
            "type": "string",
            "example": "Review",
            "description": "The step the workflow is currently on.",
            "enum": ["Review", "Sign", "Archive", "Complete"],
            "readOnly": true
          },
          "schema": {
            "$ref": "#/components/schemas/AttributesModel"
          },
          "isCancelled": {
            "type": "boolean",
            "example": false,
            "description": "Displays if the launched workflow has been cancelled.",
            "readOnly": true,
            "deprecated": true
          },
          "isComplete": {
            "type": "boolean",
            "example": false,
            "description": "Displays if the launched workflow has been completed.",
            "readOnly": true,
            "deprecated": true
          },
          "status": {
            "type": "string",
            "example": "active",
            "description": "The current status of the launched workflow.",
            "enum": ["active", "paused", "cancelled", "completed"],
            "readOnly": true
          },
          "creator": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "63d415e0dd0d828c3a878548",
                "description": "",
                "readOnly": true
              },
              "email": {
                "type": "string",
                "example": "fett@intergalactic.com",
                "description": "",
                "readOnly": true
              },
              "displayName": {
                "type": "string",
                "example": "Boba Fett",
                "description": "",
                "readOnly": true
              }
            },
            "description": "",
            "readOnly": true,
            "title": ""
          },
          "created": {
            "type": "string",
            "example": "2016-11-17T00:37:22.318Z",
            "description": "The date (ISO8601 format) the workflow was launched",
            "readOnly": true
          },
          "lastUpdated": {
            "type": "string",
            "example": "2016-11-17T00:37:42.318Z",
            "description": "The date (ISO8601 format) the workflow was last updated",
            "readOnly": true
          },
          "roles": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/WorkflowRoleModel"
            }
          },
          "approvals": {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "example": "in_progress",
                "description": "The state of the approvals.",
                "enum": ["not_started", "in_progress", "completed", "not_applicable"],
                "readOnly": true
              }
            }
          },
          "signatures": {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "example": "in_progress",
                "description": "The state of the signatures.",
                "enum": ["not_started", "in_progress", "complete", "not_applicable"],
                "readOnly": true
              },
              "url": {
                "type": "string",
                "example": "https://ironcladapp.com/public/api/v1/workflows/6dac47a10b1242d1f7df688d/signatures",
                "description": "The url where signature information is located if it exists.",
                "readOnly": true
              }
            }
          },
          "recordIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "715f1e37-292f-4e6c-8b48-c07e1b68bccd",
              "description": "Ids of records created by the workflow."
            },
            "readOnly": true
          },
          "isRevertibleToReview": {
            "type": "boolean",
            "example": false,
            "description": "Displays if the launched workflow can be reverted back to the review step.",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "title",
          "template",
          "step",
          "attributes",
          "schema",
          "isCancelled",
          "isComplete",
          "status",
          "created",
          "lastUpdated",
          "roles",
          "approvals",
          "signatures",
          "isRevertibleToReview"
        ],
        "description": "The response from a successful workflow launch."
      },
      "WorkflowRequestModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "template": {
            "$ref": "#/components/schemas/WorkflowTemplateIdModel"
          },
          "creator": {
            "$ref": "#/components/schemas/CreatorEmailModel"
          },
          "attributes": {
            "$ref": "#/components/schemas/AttributesModel"
          }
        },
        "required": [
          "attributes",
          "creator",
          "template"
        ]
      },
      "WorkflowResponseModel": {
        "type": "object",
        "description": "The response from a successful workflow retrieval.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "6013609108b8f070cee94fc1"
          },
          "ironcladId": {
            "type": "string",
            "example": "IC-1"
          },
          "title": {
            "type": "string",
            "example": "Consulting Agreement with Jane Doe"
          },
          "template": {
            "type": "string",
            "example": "600b296c3e15a234ab88f884"
          },
          "step": {
            "type": "string",
            "example": "Review"
          },
          "schema": {
            "type": "object",
            "properties": {
              "counterpartyName": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Example String Attribute"
                  }
                }
              },
              "amount": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "number"
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Example Number Attribute"
                  }
                }
              },
              "fee": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "monetaryAmount"
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Example Monetary Amount Attribute"
                  }
                }
              },
              "draft": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "array"
                  },
                  "elementType": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "document"
                      },
                      "displayName": {
                        "type": "string",
                        "example": "Example Document Attribute"
                      }
                    }
                  }
                }
              },
              "lineItems": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "array"
                  },
                  "elementType": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "object"
                      },
                      "displayName": {
                        "type": "string",
                        "example": "Example Object Attribute"
                      },
                      "schema": {
                        "type": "object",
                        "properties": {
                          "childAttribute": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "example": "string"
                              },
                              "displayName": {
                                "type": "string",
                                "example": "Example String Attribute"
                              }
                            }
                          },
                          "anotherChildAttribute": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "example": "string"
                              },
                              "displayName": {
                                "type": "string",
                                "example": "Example String Attribute"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "attributes": {
            "type": "object",
            "properties": {
              "counterpartyName": {
                "type": "string",
                "example": "Boba Fett"
              },
              "amount": {
                "type": "integer",
                "example": 123,
                "default": 0
              },
              "fee": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string",
                    "example": "USD"
                  },
                  "amount": {
                    "type": "integer",
                    "example": 50000,
                    "default": 0
                  }
                }
              },
              "draft": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string",
                      "example": "B1QePArXb"
                    },
                    "versionNumber": {
                      "type": "number",
                      "example": 2
                    },
                    "filename": {
                      "type": "string",
                      "example": "file.pdf"
                    },
                    "download": {
                      "type": "string",
                      "example": "/public/api/v1/workflows/594356b9fbcd7f74006fdf8a/document/rJklwCHQ/download"
                    },
                    "lastModified": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "example": "2016-11-17T00:37:22.318Z"
                        },
                        "author": {
                          "$ref": "#/components/schemas/WorkflowLastModifiedAuthorModel"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "isCancelled": {
            "type": "boolean",
            "example": false,
            "default": true
          },
          "isComplete": {
            "type": "boolean",
            "example": false,
            "default": true
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "completed",
              "cancelled",
              "paused"
            ],
            "example": "active"
          },
          "creator": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "63d415e0dd0d828c3a878548"
              },
              "displayName": {
                "type": "string",
                "example": "Boba Fett"
              },
              "email": {
                "type": "string",
                "example": "fett@intergalactic.com"
              },
              "title": {
                "type": "string",
                "example": "Director"
              },
              "username": {
                "type": "string",
                "example": "fett@intergalactic.com"
              },
              "metadata": {
                "type": "object",
                "example": {}
              }
            },
            "required": [
              "id",
              "displayName",
              "email",
              "title",
              "username",
              "metadata"
            ]
          },
          "created": {
            "type": "string",
            "example": "2016-11-17T00:37:22.318Z"
          },
          "lastUpdated": {
            "type": "string",
            "example": "2016-11-17T00:37:22.318Z"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "legal"
                },
                "displayName": {
                  "type": "string",
                  "example": "Legal"
                },
                "assignees": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "userName": {
                        "type": "string",
                        "example": "Boba Fett"
                      },
                      "userId": {
                        "type": "string",
                        "example": "63d415e0dd0d828c3a878548"
                      },
                      "email": {
                        "type": "string",
                        "example": "bobafett@gmail.com"
                      }
                    },
                    "required": [
                      "userName",
                      "userId",
                      "email"
                    ]
                  }
                }
              },
              "required": [
                "id",
                "displayName",
                "assignees"
              ]
            }
          },
          "approvals": {
            "$ref": "#/components/schemas/WorkflowStateModel"
          },
          "signatures": {
            "$ref": "#/components/schemas/WorkflowStateModel"
          },
          "recordIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "715f1e37-292f-4e6c-8b48-c07e1b68bccd"
            }
          },
          "isRevertibleToReview": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "id",
          "title",
          "template",
          "step",
          "attributes",
          "schema",
          "isCancelled",
          "isComplete",
          "status",
          "created",
          "lastUpdated",
          "roles",
          "approvals",
          "signatures",
          "isRevertibleToReview"
        ]
      },
      "WorkflowTemplateIdModel": {
        "type": "string",
        "description": "The identifier of the workflow template",
        "example": "600b296c3e15a234ab88f884"
      },
      "AttributeStringModel": {
        "type": "string",
        "example": "Example Value"
      },
      "AttributeNumberModel": {
        "type": "number",
        "example": 5
      },
      "AttributesModel": {
        "type": "object",
        "description": "The data that will be used to populate the workflow's fields. Learn more about the various attributes and their associated types by viewing the [Launch a Workflow](https://developer.ironcladapp.com/docs/launch-a-workflow) guide. Your attributes will differ and include more than this simple example.",
        "properties": {
          "counterpartyName": {
            "type": "string",
            "example": "Example Company"
          },
          "draft": {
            "type": "array",
            "description": "Provide a URL for a file representing the first uploaded version of a counterparty paper. This field is required when the template source is set to third party paper",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "URL of the file to be uploaded",
                  "example": "https://www.law.berkeley.edu/wp-content/uploads/2018/12/Resume-Samples-1.pdf"
                }
              }
            }
          },
          "paperSource": {
            "type": "string",
            "description": "Indicate the type of paper source used on a contract that supports both templatized and third party paper functionality. This field is required when there exists a question for selecting paper source on the template",
            "enum": ["Counterparty paper", "Our paper"]
          }
        },
        "additionalProperties": false,
        "required": [
          "counterpartyName"
        ]
      },
      "InboundAttachmentModel": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "example": "file.docx"
          },
          "content-type": {
            "type": "string",
            "example": "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
          },
          "download": {
            "type": "string",
            "example": "/public/api/v1/workflows/6013609108b8f070cee94fc1/emails/z_1zgjgjq/attachments/attachmentIdc85d7e3be5d84bf28cebe4591e39c894"
          }
        }
      },
      "OutboundAttachmentModel": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "example": "attachment.pdf"
          },
          "content-type": {
            "type": "string",
            "example": "application/pdf"
          },
          "download": {
            "type": "string",
            "example": "/public/api/v1/workflows/6013609108b8f070cee94fc1/document/XZ9j0cHGA/download"
          }
        }
      },
      "CreatorModel": {
        "type": "object",
        "additionalProperties": false,
        "description": "The Ironclad user (must be a user in your Ironclad account) to be used for launching the workflow.",
        "oneOf": [
          {"$ref": "#/components/schemas/CreatorEmailModel"},
          {"$ref": "#/components/schemas/CreatorIdModel"}
        ],
        "title": "creator"
      },
      "CreatorEmailModel": {
        "type": "object",
        "additionalProperties": false,
        "description": "The Ironclad user (must be a user in your Ironclad account) used to launch the workflow by using the user's email address.",
        "properties": {
          "type": {
            "type": "string",
            "default": "email",
            "description": "The type of value used to identify the user."
          },
          "email": {
            "type": "string",
            "description": "The email address of the Ironclad user.",
            "example": "example@example.com"
          }
        }
      },
      "CreatorIdModel": {
        "type": "object",
        "additionalProperties": false,
        "description": "The Ironclad user (must be a user in your Ironclad account) used to launch the workflow by using the user's ID.",
        "properties": {
          "type": {
            "type": "string",
            "default": "id",
            "description": "The type of value used to identify the user."
          },
          "id": {
            "type": "string",
            "description": "The user ID of the Ironclad user.",
            "example": "abcd1234"
          }
        }
      },
      "WorkflowLastModifiedAuthorModel": {
        "type": "object",
        "oneOf": [
          {
            "$ref" : "#/components/schemas/InternalUserModel"
          },
          {
            "$ref" : "#/components/schemas/ExternalUserModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [ "counterparty" ],
                "example": "counterparty"
              },
              "displayName": {
                "type": "string",
                "example": "Boba Fett"
              }
            },
            "required": [
              "type",
              "displayName"
            ]
          }
        ],
        "title": "author"
      },
      "EmailResponseModel": {
        "type": "object",
        "oneOf": [
          {"$ref": "#/components/schemas/InboundEmailResponse"},
          {"$ref": "#/components/schemas/OutboundEmailResponse"}
        ]
      },
      "InboundEmailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6372b491abd2adf22f6e13ff"
          },
          "emailThreadId": {
            "type": "string",
            "example": "emailThread16ca903a0ec44ae09fc0b3fb3339ffa0"
          },
          "type": {
            "type": "string",
            "enum": ["inboundEmail"]
          },
          "author": {
            "$ref": "#/components/schemas/ActivityAuthorModel"
          },
          "timestamp": {
            "type": "string",
            "example": "2022-09-28T19:21:05.034Z"
          },
          "subject": {
            "type": "string",
            "example": "This is the subject of an email"
          },
          "body": {
            "type": "string",
            "example": "This is a body of an email.\\n"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InboundAttachmentModel"
            }
          }
        }
      },
      "OutboundEmailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "6372b491abd2adf22f6e13ff"
          },
          "type": {
            "type": "string",
            "enum": [ "outboundEmail"]
          },
          "author": {
            "$ref": "#/components/schemas/ActivityAuthorModel"
          },
          "timestamp": {
            "type": "string",
            "example": "2022-09-28T19:21:05.034Z"
          },
          "subject": {
            "type": "string",
            "example": "This is the subject of an email"
          },
          "body": {
            "type": "string",
            "example": "This is a body of an email.\\n"
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "dopstop@ironclad.boba"
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "admiral@ironclad.boba"
            }
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutboundAttachmentModel"
            }
          },
          "emailOpenedTimestamps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "david@boba.com"
                },
                "opened": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "WorkflowRoleModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "legal"
          },
          "displayName": {
            "type": "string",
            "example": "Legal"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowRoleAssigneeModel"
            }
          }
        },
        "description": ""
      },
      "WorkflowRoleAssigneeModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userName": {
            "type": "string",
            "example": "Boba Fett"
          },
          "userId": {
            "type": "string",
            "example": "63d415e0dd0d828c3a878548"
          },
          "email": {
            "type": "string",
            "example": "bobafett@gmail.com"
          }
        },
        "description": ""
      },
      "RecordModel": {
        "type": "object", 
        "properties": {
          "id": {
            "type": "string",
            "example": "22e2ff72-56a1-4711-a4ca-41328d311e9f"
          },
          "ironcladId": {
            "type": "string",
            "example": "IC-1"
          },
          "type": {
            "type": "string",
            "example": "consultingAgreement"
          },
          "name": {
            "type": "string",
            "example": "Consulting Agreement with Jane Doe"
          },
          "lastUpdated": {
            "type": "string",
            "example": "2018-05-08T17:28:10Z"
          },
          "properties": {
            "type": "object",
            "properties": {
              "agreementDate": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "date"
                  },
                  "value": {
                    "type": "string",
                    "example": "2018-05-08T00:00:00-07:00"
                  }
                }
              },
              "counterpartyName": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  },
                  "value": {
                    "type": "string",
                    "example": "Jane Doe"
                  }
                }
              },
              "counterpartyEmail": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "email"
                  },
                  "value": {
                    "type": "string",
                    "example": "jane.doe@test.com"
                  }
                }
              },
              "hourlyRate": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "monetaryAmount"
                  },
                  "value": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "integer",
                        "example": 100,
                        "default": 0
                      },
                      "currency": {
                        "type": "string",
                        "example": "USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "attachments": {
            "type": "object",
            "properties": {
              "signedCopy": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "example": "2018-05-08 - Doe, Jane - Consulting Agreement.pdf"
                  },
                  "contentType": {
                    "type": "string",
                    "example": "application/json"
                  },
                  "href": {
                    "type": "string",
                    "example": "https://ironcladapp.com/public/api/v1/records/22e2ff72-56a1-4711-a4ca-41328d311e9f/attachments/signedCopy"
                  }
                }
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "recordId": {
                  "type": "string",
                  "example": "df1c2805-f5a3-4a14-9386-c28d950dff49"
                }
              }
            }
          },
          "parentId": {
            "type": "string",
            "example": "d10b8c01-5c54-4a59-82cb-51e3825182e9"
          },
          "childIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "4a785686-d3d5-47bc-960e-3df0df871ea9"
            }
          },
          "source": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "workflow"
              },
              "workflowId": {
                "type": "string",
                "example": "abcd1234"
              }
            }
          }
        }
      },
      "RecordPropertyLinkModel": {
        "type": "object",
        "properties": {
          "recordId": {
            "type": "string",
            "example": "17009e0d-z2e9-425d-a85b-1cf152773e49"
          }
        }
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "id" : {
            "type": "string"
          },
          "displayName" : {
            "type": "string"
          }
        }
      },
      "BaseActivityFeedItemModel" : {
        "type": "object",
        "required": [ "id", "type", "metadata", "author"],
        "properties": {
          "id" : {
            "type": "string"
          },
          "type" : {
            "type": "string",
            "enum": [
              "comment"
            ]
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ActivityMetadataModel"
          },
          "author" : {
            "$ref": "#/components/schemas/ActivityAuthorModel"
          },
          "isExternal" : {
            "type": "boolean"
          },
          "reactions" : {
            "$ref" : "#/components/schemas/ActivityReactionModel"
          }
        }
      },
      "ActivityMetadataModel" : {
        "type": "object",
        "oneOf": [
          { "$ref" : "#/components/schemas/CommentMetadataModel" }
        ],
        "discriminator": {
          "propertyName": "objectType",
          "mapping": {
            "comment" : "#/components/schemas/CommentMetadataModel"
          }
        }
      },
      "ActivityAuthorModel": {
        "type": "object",
        "oneOf": [
          {
            "$ref" : "#/components/schemas/InternalUserModel"
          },
          {
            "$ref": "#/components/schemas/ExternalUserModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["integration"],
                "example": "integration"
              },
              "displayName": {
                "type": "string",
                "example": "Salesforce"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["system"],
                "example": "system"
              },
              "displayName": {
                "type": "string",
                "example": "Ironclad"
              }
            }
          }
        ]
      },
      "InternalUserModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["internalUser"],
            "example": "internalUser"
          },
          "displayName": {
            "type": "string",
            "example": "Boba Fett"
          },
          "email": {
            "type": "string",
            "example": "boba@ironclad.boba"
          },
          "userId": {
            "type": "string",
            "example": "63d415e0dd0d828c3a878548"
          },
          "companyName": {
            "type": "string",
            "example": "Ironclad"
          }
        },
        "required": [
          "type",
          "displayName",
          "email",
          "userId",
          "companyName"
        ]
      },
      "ExternalUserModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["externalUser"],
            "example": "externalUser"
          },
          "displayName": {
            "type": "string",
            "example": "Boba Fett"
          },
          "email": {
            "type": "string",
            "example": "boba@ironclad.boba"
          },
          "companyName": {
            "type": "string",
            "example": "ironclad"
          }
        },
        "required": [
          "type",
          "email",
          "companyName"
        ]
      },
      "ActivityReactionModel": {
        "type": "object",
        "properties": {
          "emojiId": {
            "type": "string",
            "example": "smile"
          },
          "reactors": {
            "type": "array",
            "items": {
              "$ref" : "#/components/schemas/UserModel"
            }
          }
        }
      },
      "CommentActivityModel": {
        "type": "object",
        "allOf": [
          { "$ref" : "#/components/schemas/BaseActivityFeedItemModel"}
        ],
        "properties": {
          "metadata" : {
            "$ref" : "#/components/schemas/CommentMetadataModel"
          }
        }
      },
      "CommentMetadataModel" : {
        "type": "object",
        "properties": {
          "message" : {
            "type": "string",
            "example": "This is a comment Jon Snow"
          },
          "markedUpMessage" : {
            "type": "string",
            "example": "This is a comment @[Jon Snow](630d28059893be00e1ccc9e7)"
          },
          "addedParticipants": {
            "type": "array",
            "items": {
              "$ref" : "#/components/schemas/UserModel"
            }
          },
          "repliedTo" : {
            "type": "object",
            "properties": {
              "activityItem": {
                "type": "string",
                "example": "TODO: unsure this is the right place"
              },
              "author": {
                "$ref" : "#/components/schemas/ActivityAuthorModel"
              }
            }
          }
        }
      },
      "WorkflowStateModel": {
        "type": "object",
        "oneOf": [ 
          {
            "properties": {
              "state": {
                "type": "string",
                "enum": ["not_started"],
                "example": "not_started"
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "properties": {
              "state": {
                "type": "string",
                "enum": ["completed"],
                "example": "completed"
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "properties": {
              "state": {
                "type": "string",
                "enum": ["in_progress"],
                "example": "in_progress"
              },
              "url": {
                "type": "string",
                "example": "https://ironcladapp.com/public/api/v1/workflows/22e2ff72-56a1-4711-a4ca-41328d311e9f/approvals"
              }
            },
            "required": [
              "state", 
              "url"
            ]
          },
          {
            "properties": {
              "state": {
                "type": "string",
                "enum": ["not_applicable"],
                "example": "not_applicable"
              },
              "message": {
                "type": "string",
                "example": "This workflow has been cancelled"
              }
            },
            "required": [
              "state", 
              "message"
            ]
          }
        ]
      },
      "webhookEventTypeValue": {
        "type": "string",
        "example": "workflow_launched",
        "enum": [
          "*",
          "workflow_launched",
          "workflow_updated",
          "workflow_cancelled",
          "workflow_completed",
          "workflow_approval_status_changed",
          "workflow_attribute_updated",
          "workflow_comment_added",
          "workflow_comment_removed",
          "workflow_comment_updated",
          "workflow_comment_reaction_added",
          "workflow_comment_reaction_removed",
          "workflow_counterparty_invite_sent",
          "workflow_counterparty_invite_revoked",
          "workflow_documents_added",
          "workflow_documents_removed",
          "workflow_documents_updated",
          "workflow_documents_renamed",
          "workflow_document_edited",
          "workflow_changed_turn",
          "workflow_paused",
          "workflow_resumed",
          "workflow_signature_packet_sent",
          "workflow_signature_packet_uploaded",
          "workflow_signature_packet_cancelled",
          "workflow_signer_added",
          "workflow_signer_removed",
          "workflow_signer_reassigned",
          "workflow_step_updated"
        ]
      },
      "webhookInvalidEventTypeBadRequestResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "INVALID_PARAM"
          },
          "message": {
            "type": "string",
            "example": "invalid event type; *, workflow_launched, workflow_updated, workflow_cancelled, workflow_completed, workflow_approval_status_changed, workflow_attribute_updated, workflow_changed_turn, workflow_comment_reaction_added, workflow_comment_reaction_removed, workflow_comment_added, workflow_comment_removed, workflow_comment_updated, workflow_counterparty_invite_sent, workflow_counterparty_invite_revoked, workflow_documents_added, workflow_documents_removed, workflow_documents_updated, workflow_documents_renamed, workflow_document_edited, workflow_paused, workflow_resumed, workflow_signature_packet_sent, workflow_signature_packet_uploaded, or workflow_signature_packet_cancelled, workflow_signer_added, workflow_signer_removed, workflow_signer_reassigned are acceptable event types"
          },
          "param": {
            "type": "string",
            "example": "events"
          }
        }
      },
      "webhookTargetURLExistsBadRequestResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "INVALID_PARAM"
          },
          "message": {
            "type": "string",
            "example": "webhook already exists for event workflow_completed and target [SOME_EXISTING_TARGET_URL]"
          },
          "param": {
            "type": "string",
            "example": "tagetURL"
          }
        }
      },
      "WorkflowAsyncLaunchSuccessResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "type": "string",
            "default": "success",
            "description": "",
            "readOnly": true,
            "title": ""
          },
          "requestPayload": {
            "$ref": "#/components/schemas/WorkflowRequestModel"
          },
          "workflowUrls": {
            "type": "object",
            "properties": {
              "browserUrl": {
                "type": "string",
                "example": "http://ironcladapp.com/workflows/6013609108b8f070cee94fc1",
                "description": "The URL for accessing the workflow in a browser.",
                "readOnly": true,
                "title": ""
              },
              "apiUrl": {
                "type": "string",
                "example": "http://ironcladapp.com/public/api/v1/workflows/6013609108b8f070cee94fc1",
                "description": "The URL for accessing workflow data via the REST API.",
                "readOnly": true,
                "title": ""
              }
            },
            "description": "",
            "readOnly": true,
            "title": ""
          },
          "workflow": {
            "$ref": "#/components/schemas/LaunchedWorkflowModel"
          }
        },
        "required": [
          "status",
          "requestPayload",
          "workflowUrls",
          "workflow"
        ],
        "readOnly": true,
        "description": "Response for a successfully asynchronously launched workflow."
      },
      "WorkflowAsyncLaunchFailedResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "type": "string",
            "default": "failed",
            "description": "",
            "readOnly": true,
            "title": ""
          },
          "requestPayload": {
            "$ref": "#/components/schemas/WorkflowRequestModel"
          },
          "error": {
            "type": "string",
            "description": "An error message indicating why the workflow failed to launch.",
            "readOnly": true,
            "title": ""
          }
        },
        "required": [
          "status",
          "requestPayload",
          "error"
        ],
        "readOnly": true,
        "description": "",
        "title": "Workflow Launch Failed"
      },
      "WorkflowAsyncInProgressResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "type": "string",
            "default": "in_progress",
            "description": "",
            "readOnly": true,
            "title": ""
          },
          "requestPayload": {
            "$ref": "#/components/schemas/WorkflowRequestModel"
          }
        },
        "required": [
          "status",
          "requestPayload"
        ],
        "readOnly": true,
        "description": "",
        "title": "Workflow Launch In Progress"
      },
      "BadRequestErrorWorkflowLaunch": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "MISSING_PARAM",
              "INVALID_PARAM",
              "INVALID_STATE"
            ],
            "example": "MISSING_PARAM",
            "readOnly": true,
            "description": "A unique code to identify why the workflow cannot be launched.",
            "title": ""
          },
          "message": {
            "type": "string",
            "example": "missing required attribute",
            "readOnly": true,
            "description": "A message indicating why the workflow cannot be launched.",
            "title": ""
          },
          "param": {
            "type": "string",
            "example": "counterpartySignerTitle",
            "readOnly": true,
            "description": "The required or expected parameter(s) that may be missing in order to launch the workflow.",
            "title": ""
          }
        },
        "required": [
          "code",
          "message",
          "param"
        ],
        "readOnly": true,
        "description": "",
        "title": "Bad Request Error - Workflow Launch"
      },
      "BadRequestErrorRecordNotFound": {
        "type": "object",
        "description": "Bad request error. The specified record does not exist.",
        "title": "Bad Request Error - Record Does not Exist",
        "properties": {
          "code": {
            "type": "string",
            "example": "NOT_FOUND"
          },
          "message": {
            "type": "string",
            "example": "couldn't find a record matching the id workflow:6346f76fb8fc01d2b43e7c15a"
          }
        }
      },
      "BadRequestErrorRecordAttachmentExtension": {
        "type": "object",
        "description": "Bad request error. The specified filename does not include a supported extension.",
        "title": "Bad Request Error - Record Attachment Extension Not Supported",
        "properties": {
          "code": {
            "type": "string",
            "example": "INVALID_PARAM"
          },
          "message": {
            "type": "string",
            "example": "filename \"NDA - Acme LLC\" does not have an accepted extension. Only the following extensions are allowed: .adoc, .asice, .bdoc, .csv, .ddoc, .doc, .docx, .edoc, .eml, .gif, .htm, .jpeg, .jpg, .msg, .pdf, .png, .ppt, .pptx, .rtf, .tif, .tif, .txt, .xls, .xlsx, .xml"
          },
          "param": {
            "type": "string",
            "example": "metadata.filename"
          }
        }
      },
      "BadRequestErrorRecordAttachmentAlreadyExists": {
        "type": "object",
        "description": "Bad request error. The specified attachment key has an existing file.",
        "title": "Bad Request Error - Record Attachment Already Exists.",
        "properties": {
          "code": {
            "type": "string",
            "example": "INVALID_PARAM"
          },
          "message": {
            "type": "string",
            "example": "record attachment key 'signedCopy' already exists for record"
          },
          "param": {
            "type": "string",
            "example": "attachmentKey"
          }
        }
      },
      "BadRequestErrorRecordAttachmentUnknownAttachmentKey": {
        "type": "object",
        "description": "Bad request error. Unknown record attachment key.",
        "title": "Bad Request Error - Unknown Record Attachment Key",
        "properties": {
          "code": {
            "type": "string",
            "example": "INVALID_PARAM"
          },
          "message": {
            "type": "string",
            "example": "unknown record attachment key 'someRandomKey'"
          },
          "param": {
            "type": "string",
            "example": "attachmentKey"
          }
        }
      },
      "BadRequestErrorRecordAttachmentUnknownContentType": {
        "type": "object",
        "description": "Bad request error. Unknown content type.",
        "title": "Bad Request Error - Unknown Content Type",
        "properties": {
          "code": {
            "type": "string",
            "example": "INVALID_PARAM"
          },
          "message": {
            "type": "string",
            "example": "unknown content type 'filename or extension'"
          },
          "param": {
            "type": "string",
            "example": "metadata.filename"
          }
        }
      },
      "BadRequestErrorRecordAttachmentMissingFormDataPart": {
        "type": "object",
        "description": "Bad request error. Missing form-data part.",
        "title": "Bad Request Error - Missing Form-Data Part",
        "properties": {
          "code": {
            "type": "string",
            "example": "INVALID_PARAM"
          },
          "message": {
            "type": "string",
            "example": "missing required form-data part 'metadata'"
          },
          "param": {
            "type": "string",
            "example": "metadata"
          }
        }
      },
      "BadRequestErrorRecordIDNotFound": {
        "type": "object",
        "description": "Record ID Not Found Request Error",
        "title": "Bad Request Error - Record ID Not Found",
        "properties": {
          "code": {
            "type": "string",
            "example": "NOT_FOUND"
          },
          "message": {
            "type": "string",
            "example": "couldn't find a record matching the id [SOME_NONEXISTENT_RECORD_ID]"
          }
        }
      },
      "BadRequestErrorRecordAttachmentIDNotFound": {
        "type": "object",
        "description": "Record Attachment ID Not Found Request Error",
        "title": "Bad Request Error - Record Attachment ID Not Found",
        "properties": {
          "code": {
            "type": "string",
            "example": "NOT_FOUND"
          },
          "message": {
            "type": "string",
            "example": "couldn't find an attachment matching the key [SOME_NONEXISTENT_ATTACHMENT_KEY] for record with id [RECORD_ID]"
          }
        }
      },
      "WorkflowNotFound": {
        "type": "object",
        "description": "Workflow ID Not Found Request Error",
        "title": "Bad Request Error - Workflow ID Not Found",
        "properties": {
          "code": {
            "type": "string",
            "example": "NOT_FOUND"
          },
          "message": {
            "type": "string",
            "example": "workflow does not exist"
          },
          "param": {
            "type": "string",
            "example": "workflowId"
          }
        }
      },
      "EmailNotFound": {
        "type": "object",
        "description": "Email ID Not Found Request Error",
        "title": "Bad Request Error - Email ID Not Found",
        "properties": {
          "code": {
            "type": "string",
            "example": "NOT_FOUND"
          },
          "message": {
            "type": "string",
            "example": "emailThreadId does not exist"
          },
          "param": {
            "type": "string",
            "example": "emailThreadId"
          }
        }
      },
      "AttachmentNotFound": {
        "type": "object",
        "description": "attachmentId Not Found Request Error",
        "title": "Bad Request Error - attachmentId Not Found",
        "properties": {
          "code": {
            "type": "string",
            "example": "NOT_FOUND"
          },
          "message": {
            "type": "string",
            "example": "attachmentId does not exist"
          },
          "param": {
            "type": "string",
            "example": "attachmentId"
          }
        }
      }
    },
    "responses": {
      "webhookCreateResponse400": {
        "description": "Bad request error when creating webhook.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {"$ref": "#/components/schemas/webhookInvalidEventTypeBadRequestResponse"},
                {"$ref": "#/components/schemas/webhookTargetURLExistsBadRequestResponse"}
              ]
            }
          }
        }
      },
      "AttachmentDeleteResponse404": {
        "description": "Bad request error when deleting attachment.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BadRequestErrorRecordIDNotFound"
                },
                {
                  "$ref": "#/components/schemas/BadRequestErrorRecordAttachmentIDNotFound"
                }
              ]
            }
          }
        }
      },
      "WorkflowLaunchResponse200": {
        "description": "Launched Workflow Response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LaunchedWorkflowModel"
            }
          }
        }
      },
      "WorkflowLaunchResponse400": {
        "description": "Error Launching Workflow.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequestErrorWorkflowLaunch"
            }
          }
        }
      },
      "AsyncWorkflowLaunchResponse200": {
        "description": "The response of the initiated async workflow launch.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "asyncJobId": {
                  "type": "string",
                  "example": "jobIda89474a8ba364f79bb510517d7bd3fea",
                  "readOnly": true,
                  "description": "",
                  "title": ""
                },
                "asyncJobStatusUrl": {
                  "type": "string",
                  "example": "http://ironcladapp.com/public/api/v1/workflows/async/jobIda89474a8ba364f79bb510517d7bd3fea",
                  "readOnly": true,
                  "description": "",
                  "title": ""
                }
              },
              "required": [
                "asyncJobId",
                "asyncJobStatusUrl"
              ],
              "description": "",
              "title": ""
            }
          }
        }
      },
      "AsyncWorkflowStatusResponse200": {
        "description": "The status of the workflow launch.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "description": "The current status of the launch workflow job.",
              "oneOf": [
                {"$ref": "#/components/schemas/WorkflowAsyncLaunchSuccessResponse"},
                {"$ref": "#/components/schemas/WorkflowAsyncLaunchFailedResponse"},
                {"$ref": "#/components/schemas/WorkflowAsyncInProgressResponse"}
              ],
              "readOnly": true,
              "title": "Workflow Launch Status"
            }
          }
        }
      },
      "EmailsResponse200": {
        "description": "GET Emails Response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "integer",
                  "example": 0,
                  "default": 0
                },
                "pageSize": {
                  "type": "integer",
                  "example": 20,
                  "default": 20
                },
                "count": {
                  "type": "integer",
                  "example": 1
                },
                "list": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailResponseModel"
                  }
                }
              }
            }
          }
        }
      },
      "EmailResponse200": {
        "description": "GET Email Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmailResponseModel"
            }
         }
        }
      },
      "RecordAttachmentResponse400": {
        "description": "Bad request error for creating record attachment.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {"$ref": "#/components/schemas/BadRequestErrorRecordNotFound"},
                {"$ref": "#/components/schemas/BadRequestErrorRecordAttachmentExtension"},
                {"$ref": "#/components/schemas/BadRequestErrorRecordAttachmentAlreadyExists"},
                {"$ref": "#/components/schemas/BadRequestErrorRecordAttachmentUnknownAttachmentKey"},
                {"$ref": "#/components/schemas/BadRequestErrorRecordAttachmentUnknownContentType"},
                {"$ref": "#/components/schemas/BadRequestErrorRecordAttachmentMissingFormDataPart"}
              ]
            }
          }
        }
      },
      "WorkflowNotFoundResponse404": {
        "description": "404 not found",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/WorkflowNotFound"
                }
              ]
            }
          }
        }
      },
      "WorkflowOrEmailNotFoundResponse404": {
        "description": "404 not found",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/WorkflowNotFound"
                },
                {
                  "$ref": "#/components/schemas/EmailNotFound"
                }
              ]
            }
          }
        }
      },
      "ObjectNotFoundResponse404": {
        "description": "404 not found",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/WorkflowNotFound"
                },
                {
                  "$ref": "#/components/schemas/EmailNotFound"
                },
                {
                  "$ref": "#/components/schemas/AttachmentNotFound"
                }
              ]
            }
          }
        }
      }
    },
    "parameters": {
      "WorkflowId": {
        "name": "id",
        "in": "path",
        "description": "The unique identifier of a workflow",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "QueryPageNumber": {
        "name": "page",
        "in": "query",
        "description": "The page number used when paginating through a list of results.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "QueryPageSize": {
        "name": "pageSize",
        "in": "query",
        "description": "A limit of the number of results to return.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        }
      },
      "RecordFilter": {
        "name": "filter",
        "in": "query",
        "description": "Filter records for those that contain (1) the specified property with (2) the specified value. The record property ID should be enclosed in brackets `[ ]` and the value should be enclosed in single quotes `' '`.",
        "schema": {
          "type": "string",
          "example": "Equals([counterpartyName], 'Test LLC')"
        }
      },
      "RecordType": {
        "name": "types",
        "in": "query",
        "description": "Comma separated (no spaces) record types to export. Use the [Retrieve Records Schema](https://developer.ironcladapp.com/reference/list-all-records-metadata) endpoint to retrieve a list of types.",
        "example": "mutualNDA,consultingAgreement",
        "schema": {
          "type": "string"
        }
      },
      "RecordLastUpdated": {
        "name": "lastUpdated",
        "in": "query",
        "description": "Get records updated since (UTC)",
        "example": "2018-03-10T00:00:00.000Z",
        "schema": {
          "type": "string"
        }
      },
      "XAsUserEmail": {
          "name": "x-as-user-email",
          "in": "header",
          "description": "Filters the list of workflow schemas based on the permissions of a user associated with the specified user email. Permissions can be launch, view, or both. Corresponds to the permissions here: https://support.ironcladapp.com/s/article/Understanding-and-Managing-Permissions",
          "required": false,
          "schema": {
            "type": "string",
            "example": "jane.doe@test.com"
          }
      },
      "XAsUserId": {
        "name": "x-as-user-id",
        "in": "header",
        "description": "Filters the list of workflow schemas based on the permissions of a user associated with the specified user id. Permissions can be launch, view, or both. Corresponds to the permissions here: https://support.ironcladapp.com/s/article/Understanding-and-Managing-Permissions",
        "required": false,
        "schema": {
          "type": "string",
          "example": "5f0375c4cdc1927a3c5edcd3"
        }
      },
      "EmailThreadId": {
        "name": "emailThreadId",
        "in": "path",
        "description": "The unique identifier of an email thread",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "requestBodies": {
      "WorkflowLaunch": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WorkflowRequestModel"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "sec0": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "x-bearer-format": "bearer"
      }
    }
  },
  "security": [
    {
      "sec0": []
    }
  ],
  "tags": [
    {
      "name": "Workflows",
      "description": "Documentation on Ironclad Workflows."
    },
    {
      "name": "Records",
      "description": "Documentation on Ironclad Records."
    },
    {
      "name": "Webhooks",
      "description": "Documentation on Ironclad Webhooks."
    }
  ],
  "x-readme": {
    "headers": [],
    "explorer-enabled": true,
    "proxy-enabled": true,
    "samples-languages": [
      "curl",
      "node",
      "ruby",
      "javascript",
      "python"
    ]
  }
}
